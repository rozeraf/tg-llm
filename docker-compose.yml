version: '3.8'

services:
  db:
    image: postgres:16-alpine
    container_name: tg_llm_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-tgllm}
      POSTGRES_USER: ${POSTGRES_USER:-tgllm}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-tgllm}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.7
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c max_connections=100
      -c log_min_duration_statement=1000
      -c log_checkpoints=on
      -c log_connections=on
      -c log_disconnections=on
    networks:
      - bot_network

  bot:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: tg_llm_bot
    depends_on:
      db:
        condition: service_healthy
    environment:
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - API_KEY=${API_KEY}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-tgllm}
      - POSTGRES_USER=${POSTGRES_USER:-tgllm}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-tgllm}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MAX_WORKERS=${MAX_WORKERS:-4}
      - RATE_LIMIT_REQUESTS=${RATE_LIMIT_REQUESTS:-20}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-60}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./bot.log:/app/bot.log
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - bot_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  redis:
    image: redis:7-alpine
    container_name: tg_llm_redis
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - bot_network

  # Optional: monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: tg_llm_prometheus
    profiles: ["monitoring"]
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - bot_network

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: tg_llm_grafana
    profiles: ["monitoring"]
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - bot_network

  # Optional: backup service
  backup:
    image: postgres:16-alpine
    container_name: tg_llm_backup
    profiles: ["backup"]
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-tgllm}
      POSTGRES_USER: ${POSTGRES_USER:-tgllm}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-tgllm}
      PGPASSWORD: ${POSTGRES_PASSWORD:-tgllm}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: >
      sh -c "
        apk add --no-cache dcron &&
        echo '0 2 * * * /backup.sh' | crontab - &&
        crond -f
      "
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - bot_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  bot_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16